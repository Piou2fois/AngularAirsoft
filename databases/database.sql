/* Script to create the original structure of the databases */
/* Table T_GROUPS - contains all groups information (for the party) */
CREATE TABLE `T_GROUPS` (
	`GROUPS_ID`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`GROUPS_NAME`	TEXT NOT NULL,
	`GROUPS_DESCRIPTION`	TEXT,
	`GROUPS_PICTURE`	TEXT
);
/* Add a record for the "no Group" players. */
INSERT INTO 'T_GROUPS' VALUES (0,'Sans Groupe','Groupe pour les joueurs non affect√©s','');
/* Table T_PLAYERS - contains all players information*/
CREATE TABLE `T_PLAYERS` (
	`PLAYERS_ID`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`PLAYERS_LASTNAME`	TEXT NOT NULL,
	`PLAYERS_FIRSTNAME`	TEXT NOT NULL,
	`PLAYERS_NICKNAME`	TEXT,
	`PLAYERS_TEAM`	TEXT,
	`PLAYERS_PICTURE`	TEXT,
	`PLAYERS_BIRTHDATE`	TEXT,
	`PLAYERS_ADDRESS`	TEXT,
	`PLAYERS_PHONE`	TEXT
);
/* Table T_REPLICAS - contains all replicas information. Records are linked with the playres, if a player is deleted, its replicas too*/
CREATE TABLE `T_REPLICAS` (
	`REPLICAS_ID`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`PLAYERS_ID`	INTEGER NOT NULL,
	`REPLICAS_NAME`	TEXT NOT NULL,
	`REPLICAS_FPS`	INTEGER,
	`REPLICATYPE_ID`	INTEGER,
	`REPLICAS_PICTURE`	TEXT,
	FOREIGN KEY(`PLAYERS_ID`) REFERENCES T_PLAYERS ( PLAYERS_ID ) ON DELETE CASCADE
);
/* Table T_PLAYERS_GROUPS_PG - link table to populate the groups with players. Records are linked with the players AND the groups. One player or group is deleted means associated records too.*/
CREATE TABLE `T_PLAYERS_GROUPS_PG` (
	`PG_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	`GROUPS_ID`	INTEGER NOT NULL DEFAULT 0,
	`PLAYERS_ID`	INTEGER NOT NULL,
	FOREIGN KEY(`GROUPS_ID`) REFERENCES T_GROUPS ( GROUPS_ID ) ON DELETE SET DEFAULT,
	FOREIGN KEY(`PLAYERS_ID`) REFERENCES T_PLAYERS ( PLAYERS_ID ) ON DELETE CASCADE
);
/* Trigger add_player_to_group - Trigger to associate each player to the 'no Group"'*/
CREATE TRIGGER add_player_to_group AFTER INSERT on T_PLAYERS
BEGIN
INSERT INTO T_PLAYERS_GROUPS_PG(GROUPS_ID,PLAYERS_ID) VALUES(0,new.PLAYERS_ID);
END;
/* Trigger move_players_to_group - Trigger to move players of a deleted group to the 'no Group"'*/
CREATE TRIGGER move_players_to_group AFTER DELETE on T_GROUPS
BEGIN
UPDATE T_PLAYERS_GROUPS_PG SET GROUPS_ID=0 WHERE GROUPS_ID = old.GROUPS_ID;
END;
/* Table T_REPLICATYPE - contains types of replicas*/
CREATE TABLE `T_REPLICATYPE` (
	`REPLICATYPE_ID`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`REPLICATYPE_TYPE`	TEXT NOT NULL,
	`REPLICATYPE_POWERED_BY`	TEXT,
	`REPLICATYPE_DESCRIPTION`	TEXT
);
/* Table T_SCRIPTS - contains all scripts information.*/
CREATE TABLE `T_SCRIPTS` (
	`SCRIPTS_ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`SCRIPTS_NAME`	TEXT NOT NULL,
	`SCRIPTS_DESCRIPTION`	TEXT,
	`SCRIPTS_DETAILS`	TEXT
);
CREATE TABLE 'T_GAMES' (
	'GAMES_ID' INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	'GAMES_NAME' TEXT NOT NULL,
	'GAMES_DATE' TEXT NOT NULL,
	'GAMES_CITY' TEXT,
	'SCRIPTS_ID' INTEGER NOT NULL DEFAULT 0,
	FOREIGN KEY('SCRIPTS_ID') REFERENCES T_SCRIPTS ('SCRIPTS_ID') ON DELETE SET DEFAULT
)